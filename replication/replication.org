#+SETUPFILE: ../theme-bigblow.setup 
#+OPTIONS: author:nil creator:nil timestamp:nil

ZigZag Replication

#+BEGIN_SRC lisp :exports none
  (asdf:load-system :orient)
  (defpackage cryptolab.replication
    (:use :common-lisp :orient :filecoin :orient.base.util)
    (:nicknames :replication))

  (in-package cryptolab.replication)

#+END_SRC

#+RESULTS:
: #<PACKAGE "CRYPTOLAB.REPLICATION">

#+BEGIN_SRC lisp :package replication :exports results :results raw :var timestamp=(format-time-string "[%F %r]: ")
  (format t "~A Generated from commit ~A" timestamp (project-commit-link :org))
#+END_SRC

#+RESULTS:
[2019-08-06 05:46:07 PM]:  Generated from commit [[https://github.com/filecoin-project/orient/commit/6e2f0b85075db00a92257a670cd12e4bbe713578
][6e2f0b85075db00a92257a670cd12e4bbe713578
]]
#+NAME: init
#+BEGIN_SRC lisp :package replication :exports results :results output :var sector-gib=32 spedersen=1.7 blake2s-speedup=1.666 gpu-speedup=3 seal-parallelism=14
  (defvar *zigzag-base*)
  (defvar *zigzag-base-plan*)
  (defvar *zigzag-base-report*)
  (defvar *zigzag-base-input*)
  (defvar *zigzag-no-hybrid*)
  (defvar *filecoin-base* (solve-for (filecoin-system) '()))

  (let ((*spedersen* 1)
        (*gpu-speedup* 1)
        (*blake2s-speedup* 1))
    (multiple-value-setq (*zigzag-base-report* *zigzag-base* *zigzag-base-input* *zigzag-base-plan*)
      (report-solution-for '() :system (filecoin-system)
                                          ; :initial-data initial-data 
                           :format :html
                           :override-data (tuple (sector-gib sector-gib) (seal-parallelism seal-parallelism) (max-beta-merkle-height 30))
                                          ; :project-solution t
                           :return-plan t
                           :return-defaulted-data t))

    (setq *zigzag-no-hybrid* (solve-for (filecoin-system) '() nil
                                        :override-data (tuple (sector-gib sector-gib) (seal-parallelism seal-parallelism) (max-beta-merkle-height 0))))
    
    (format t "Initialized current ZigZag with ~A GiB sectors. Spedersen: ~d; Blake2s speedup: ~d GPU speedup: ~d~%~%"
            sector-gib *spedersen* *blake2s-speedup* *gpu-speedup* (tref 'seal-time (extract *zigzag-base*))))

  (defvar *zigzag-alt-base*)
  (defvar *zigzag-alt-base-plan*)
  (defvar *zigzag-alt-base-report*)
  (defvar *zigzag-alt-base-input*)
  (defvar *zigzag-alt-no-hybrid*)

  (let ((*spedersen* spedersen)
        (*gpu-speedup* gpu-speedup)
        (*blake2s-speedup* blake2s-speedup))
    (multiple-value-setq (*zigzag-alt-base-report* *zigzag-alt-base* *zigzag-alt-base-input* *zigzag-alt-base-plan*)
      (report-solution-for '() :system (filecoin-system)
                                          ; :initial-data initial-data 
                           :format :html
                           :override-data (tuple (sector-gib sector-gib) (seal-parallelism seal-parallelism) (max-beta-merkle-height 30))
                                          ; :project-solution t
                           :return-plan t
                           :return-defaulted-data t))

    (setq *zigzag-alt-no-hybrid* (solve-for (filecoin-system) '() nil
                                            :override-data (tuple (sector-gib sector-gib) (seal-parallelism seal-parallelism) (max-beta-merkle-height 0))))
    
    (format t "Intialized Alternate ZigZag with ~A GiB sectors. Spedersen: ~d; Blake2s speedup: ~d GPU speedup: ~d~%~%"
            sector-gib *spedersen* *blake2s-speedup* *gpu-speedup* (tref 'seal-time (extract *zigzag-base*))))

#+END_SRC

#+RESULTS: init
: Initialized current ZigZag with 32 GiB sectors. Spedersen: 1; Blake2s speedup: 1 GPU speedup: 1
: 
: Intialized Alternate ZigZag with 32 GiB sectors. Spedersen: 1.7; Blake2s speedup: 1.666 GPU speedup: 3
: 

# #+CALL: init(sector-gib=64)

# #+RESULTS:
# : Intialized with 64 GiB sectors.
* Current ZigZag
** Sector
#+BEGIN_SRC  lisp :package replication :exports results
(org-present (project '(sector-size sector-gib) *zigzag-base*) nil)
#+END_SRC
#+RESULTS:
| SECTOR-GIB | SECTOR-SIZE |
|         32 | 34359738368 |

** Replication
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(replication-time replication-time-per-GiB) *zigzag-base*) nil)

#+END_SRC

#+RESULTS:
| REPLICATION-TIME | REPLICATION-TIME-PER-GIB |
|        6855.9707 |                214.24908 |

** Sealing
*** *No Hybrid Merkle*
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(seal-time gib-seal-cost gib-hour-seal-investment seal-parallelism gib-seal-time wall-clock-seal-time wall-clock-seal-time-per-gib) *zigzag-no-hybrid*) nil)

#+END_SRC

#+RESULTS:
| SEAL-PARALLELISM | WALL-CLOCK-SEAL-TIME | GIB-SEAL-COST | SEAL-TIME | GIB-HOUR-SEAL-INVESTMENT | GIB-SEAL-TIME | WALL-CLOCK-SEAL-TIME-PER-GIB |
|               14 |             67107.86 |    0.18755668 | 946366.06 |                410.74915 |      29573.94 |                    2097.1206 |

*** *Hybrid Merkle*
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(seal-time gib-seal-cost  gib-hour-seal-investment seal-parallelism gib-seal-time wall-clock-seal-time wall-clock-seal-time-per-gib) *zigzag-base*) nil)

#+END_SRC

#+RESULTS:
| SEAL-PARALLELISM | WALL-CLOCK-SEAL-TIME | GIB-SEAL-COST | SEAL-TIME | GIB-HOUR-SEAL-INVESTMENT | GIB-SEAL-TIME | WALL-CLOCK-SEAL-TIME-PER-GIB |
|               14 |             59727.72 |    0.16707969 | 843044.06 |                365.90454 |     26345.127 |                    1866.4912 |

*** *Hybrid Savings*
#+BEGIN_SRC lisp :package replication :exports results :results output
    (let ((percent-cpu-time (* 100.0 (/ (tref 'seal-time (extract *zigzag-base*))
                                       (tref 'seal-time (extract *zigzag-no-hybrid*)))))
          (percent-wall-time (* 100.0 (/ (tref 'wall-clock-seal-time (extract *zigzag-base*))
                                         (tref 'wall-clock-seal-time (extract *zigzag-no-hybrid*))))))

      (format t "Hybrid SEAL-TIME (CPU) is ~,2f% of non-hybrid SEAL-TIME.~%This is a savings of ~,2f%.~%~%" percent-cpu-time (- 100 percent-cpu-time))
      (format t "Hybrid WALL-CLOCK-SEAL-TIME (CPU) is ~,2f% of non-hybrid WALL-CLOCK-SEAL-TIME.~%This is a savings of ~,2f%.~%~%" percent-wall-time (- 100 percent-wall-time)))
#+END_SRC

#+RESULTS:
: Hybrid SEAL-TIME (CPU) is 89.08% of non-hybrid SEAL-TIME.
: This is a savings of 10.92%.
: 
: Hybrid WALL-CLOCK-SEAL-TIME (CPU) is 89.00% of non-hybrid WALL-CLOCK-SEAL-TIME.
: This is a savings of 11.00%.
: 

** Filecoin Growth Rate (FGR)
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(one-year-fgr two-year-fgr three-year-fgr) *zigzag-base*) nil)

#+END_SRC

#+RESULTS:
| ONE-YEAR-FGR | TWO-YEAR-FGR | THREE-YEAR-FGR |
|    1.1387482 |    3.5830317 |       6.027315 |

** Hybrid Merkle Trees
#+BEGIN_SRC lisp :package replication :exports results
(org-present (tref 'optimal-heights (extract (project '(optimal-heights) *zigzag-base*))) nil)
#+END_SRC

#+RESULTS:
| CIRCUIT-TIME | HASHING-TIME | LAYER-INDEX | CONSTRAINTS | LOWEST-TIME | OPTIMAL-BETA-MERKLE-HEIGHT |
|          0.0 |     97.94244 |           0 |           0 |    97.94244 |                         30 |
|    20836.523 |    3596.2986 |           1 |   171690880 |   24432.822 |                          3 |
|    20836.523 |    3596.2986 |           2 |   171690880 |   24432.822 |                          3 |
|    20836.523 |    3596.2986 |           3 |   171690880 |   24432.822 |                          3 |
|    27110.928 |     7094.655 |           4 |   225136320 |   34205.582 |                          2 |
|     39762.69 |     7094.655 |           5 |   330199936 |   46857.348 |                          2 |
|     50527.54 |    14091.367 |           6 |   424019904 |   64618.906 |                          1 |
|     75791.31 |    14091.367 |           7 |   636029856 |    89882.68 |                          1 |
|    93488.586 |    28084.791 |           8 |   796337056 |  121573.375 |                          0 |
|    139919.16 |    28084.791 |           9 |  1191833312 |   168003.95 |                          0 |
|    209565.02 |    28084.791 |          10 |  1785077696 |   237649.81 |                          0 |

** Inputs
#+BEGIN_SRC lisp :package replication :exports results
  (let ((input  *zigzag-base-input*))
    (loop for attr in (fset:convert 'list (attributes input))
       collect (list (symbol-name attr) (present-data :org (tref attr input) nil))))

#+END_SRC

#+RESULTS:
| LAYERS                              |                                                                                                                                                                                                                                                                   10 |
| SEAL-GHZ                            |                                                                                                                                                                                                                                                                  5.0 |
| NODE-BYTES                          |                                                                                                                                                                                                                                                                   32 |
| PARTITIONS                          |                                                                                                                                                                                                                                                                    1 |
| SECTOR-GIB                          |                                                                                                                                                                                                                                                                   32 |
| SLOTH-ITER                          |                                                                                                                                                                                                                                                                    0 |
| BASE-DEGREE                         |                                                                                                                                                                                                                                                                    5 |
| CPU-GHZ-COST                        |                                                                                                                                                                                                                                                                 10.0 |
| ZIGZAG-DELTA                        |                                                                                                                                                                                                                                                                0.003 |
| ZIGZAG-TAPER                        |                                                                                                                                                                                                                                                                  1/3 |
| ANNUAL-INCOME                       |                                                                                                                                                                                                                                                              50000.0 |
| ZIGZAG-LAMBDA                       |                                                                                                                                                                                                                                                                    8 |
| HASH-FUNCTIONS                      | ((FILECOIN::HASH-FUNCTION-TIME FILECOIN::HASH-FUNCTION-CONSTRAINTS FILECOIN::HASH-FUNCTION-NAME CIRCUIT-TIME FILECOIN::HASH-FUNCTION-SIZE) (2.6156e-05 1324 :PEDERSEN 0.153988 32) (4.5608e-08 5162 :BLAKE2S-KDF 0.65253 32) (9.1216e-08 10324 :BLAKE2S 1.30506 32)) |
| TIB-DRIVE-COST                      |                                                                                                                                                                                                                                                                 30.0 |
| ZIGZAG-EPSILON                      |                                                                                                                                                                                                                                                                0.007 |
| EXPANSION-DEGREE                    |                                                                                                                                                                                                                                                                    8 |
| SEAL-PARALLELISM                    |                                                                                                                                                                                                                                                                   14 |
| AWS-GLACIER-PRICE                   |                                                                                                                                                                                                                                                                0.004 |
| MUST-HAVE-FILECOIN                  |                                                                                                                                                                                                                                                                    T |
| MINIMUM-ONE-YEAR-FGR                |                                                                                                                                                                                                                                                                   -2 |
| MINIMUM-TWO-YEAR-FGR                |                                                                                                                                                                                                                                                                 0.25 |
| UP-FRONT-MEMORY-COST                |                                                                                                                                                                                                                                                                  0.0 |
| KDF-HASH-FUNCTION-NAME              |                                                                                                                                                                                                                                                          BLAKE2S-KDF |
| MAX-BETA-MERKLE-HEIGHT              |                                                                                                                                                                                                                                                                   30 |
| MINIMUM-THREE-YEAR-FGR              |                                                                                                                                                                                                                                                                  1.0 |
| BETA-HASH-FUNCTION-NAME             |                                                                                                                                                                                                                                                              BLAKE2S |
| ALPHA-HASH-FUNCTION-NAME            |                                                                                                                                                                                                                                                             PEDERSEN |
| MINER-MONTHS-TO-CAPACITY            |                                                                                                                                                                                                                                                                    3 |
| BENCH-CIRCUIT-CONSTRAINTS           |                                                                                                                                                                                                                                                                10324 |
| MERKLE-HASH-FUNCTION-NAME           |                                                                                                                                                                                                                                                             PEDERSEN |
| SINGLE-CIRCUIT-PROOF-SIZE           |                                                                                                                                                                                                                                                                  192 |
| BENCH-CIRCUIT-PROVING-TIME          |                                                                                                                                                                                                                                                              0.14464 |
| COMMODITY-STORAGE-DISCOUNT          |                                                                                                                                                                                                                                                                   10 |
| MAXIMUM-ALLOWABLE-SPACE-GAP         |                                                                                                                                                                                                                                                                 0.02 |
| SINGLE-SLOTH-ITERATION-TIME         |                                                                                                                                                                                                                                                                  123 |
| TOTAL-ZIGZAG-OTHER-CONSTRAINTS      |                                                                                                                                                                                                                                                                    0 |
| ALPHA-MERKLE-HASH-FUNCTION-NAME     |                                                                                                                                                                                                                                                             PEDERSEN |
| SINGLE-SLOTH-ITERATION-CONSTRAINTS  |                                                                                                                                                                                                                                                                  321 |
| MINIMUM-STORAGE-TO-PROOF-SIZE-RATIO |                                                                                                                                                                                                                                                        1073741824/25 |

* Alternate ZigZag Projections
** Sector
#+BEGIN_SRC  lisp :package replication :exports results
(org-present (project '(sector-size sector-gib) *zigzag-alt-base*) nil)
#+END_SRC
#+RESULTS:
| SECTOR-GIB | SECTOR-SIZE |
|         32 | 34359738368 |

** Replication
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(replication-time replication-time-per-GiB) *zigzag-alt-base*) nil)

#+END_SRC

#+RESULTS:
| REPLICATION-TIME | REPLICATION-TIME-PER-GIB |
|        4115.2285 |                128.60089 |

** Sealing
*** *No Hybrid Merkle*
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(gib-seal-cost gib-hour-seal-investment seal-time seal-parallelism gib-seal-time wall-clock-seal-time wall-clock-seal-time-per-gib) *zigzag-alt-no-hybrid*) nil)

#+END_SRC

#+RESULTS:
| SEAL-PARALLELISM | WALL-CLOCK-SEAL-TIME | GIB-SEAL-COST | SEAL-TIME | GIB-HOUR-SEAL-INVESTMENT | GIB-SEAL-TIME | WALL-CLOCK-SEAL-TIME-PER-GIB |
|               14 |            27994.111 |    0.07848823 | 396032.78 |                171.88922 |     12376.024 |                      874.816 |

*** *Hybrid Merkle*
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(seal-time gib-seal-cost gib-hour-seal-investment  seal-parallelism gib-seal-time wall-clock-seal-time wall-clock-seal-time-per-gib) *zigzag-alt-base*) nil)

#+END_SRC

#+RESULTS:
| SEAL-PARALLELISM | WALL-CLOCK-SEAL-TIME | GIB-SEAL-COST | SEAL-TIME | GIB-HOUR-SEAL-INVESTMENT | GIB-SEAL-TIME | WALL-CLOCK-SEAL-TIME-PER-GIB |
|               14 |            22164.979 |   0.062314685 |  314424.9 |                136.46916 |      9825.778 |                     692.6556 |

*** *Hybrid Savings*
#+BEGIN_SRC lisp :package replication :exports results :results output
    (let ((percent-cpu-time (* 100.0 (/ (tref 'seal-time (extract *zigzag-base*))
                                       (tref 'seal-time (extract *zigzag-no-hybrid*)))))
          (percent-wall-time (* 100.0 (/ (tref 'wall-clock-seal-time (extract *zigzag-alt-base*))
                                         (tref 'wall-clock-seal-time (extract *zigzag-alt-no-hybrid*))))))

      (format t "Hybrid SEAL-TIME (CPU) is ~,2f% of non-hybrid SEAL-TIME.~%This is a savings of ~,2f%.~%~%" percent-cpu-time (- 100 percent-cpu-time))
      (format t "Hybrid WALL-CLOCK-SEAL-TIME (CPU) is ~,2f% of non-hybrid WALL-CLOCK-SEAL-TIME.~%This is a savings of ~,2f%.~%~%" percent-wall-time (- 100 percent-wall-time)))
#+END_SRC

#+RESULTS:
: Hybrid SEAL-TIME (CPU) is 89.08% of non-hybrid SEAL-TIME.
: This is a savings of 10.92%.
: 
: Hybrid WALL-CLOCK-SEAL-TIME (CPU) is 79.18% of non-hybrid WALL-CLOCK-SEAL-TIME.
: This is a savings of 20.82%.
: 

** FGR
#+BEGIN_SRC lisp :package replication :exports results

(org-present (project '(one-year-fgr two-year-fgr three-year-fgr) *zigzag-alt-base*) nil)

#+END_SRC

#+RESULTS:
| ONE-YEAR-FGR | TWO-YEAR-FGR | THREE-YEAR-FGR |
|    3.5845745 |     8.824088 |      14.063601 |

** Hybrid Merkle Trees
#+BEGIN_SRC lisp :package replication :exports results
(org-present (tref 'optimal-heights (extract (project '(optimal-heights) *zigzag-alt-base*))) nil)
#+END_SRC

#+RESULTS:
| CIRCUIT-TIME | HASHING-TIME | LAYER-INDEX | CONSTRAINTS | LOWEST-TIME | OPTIMAL-BETA-MERKLE-HEIGHT |
|          0.0 |     58.78898 |           0 |           0 |    58.78898 |                         30 |
|     7866.365 |    1087.6437 |           1 |   193290880 |    8954.009 |                          4 |
|     7866.365 |    1087.6437 |           2 |   193290880 |    8954.009 |                          4 |
|     7866.365 |    1087.6437 |           3 |   193290880 |    8954.009 |                          4 |
|    10418.262 |    2116.4985 |           4 |   257536320 |    12534.76 |                          3 |
|    15280.117 |    2116.4985 |           5 |   377719936 |   17396.615 |                          3 |
|    19881.344 |     4174.208 |           6 |   495299904 |    24055.55 |                          2 |
|    25263.771 |     8289.627 |           7 |   636029856 |     33553.4 |                          1 |
|     38023.25 |     8289.627 |           8 |   957257056 |   46312.875 |                          1 |
|     46639.72 |    16520.465 |           9 |  1191833312 |   63160.184 |                          0 |
|      69855.0 |    16520.465 |          10 |  1785077696 |    86375.47 |                          0 |

* Schema
#+BEGIN_SRC lisp :package replication :exports results
  (loop for schema in (all-system-schemas (zigzag-system))
     append (loop for parameter in (schema-parameters schema)
               collect (list (string-downcase (symbol-name (parameter-name parameter))) (parameter-description parameter))))
#+END_SRC

#+RESULTS:
| node-bytes                           | The number of bytes in a node -- must also be the hash digest size.                                                                                                                                                                                                            |
| sector-gib                           | Size of one sector. Unit: GiB                                                                                                                                                                                                                                                  |
| sector-size                          | Size of one sector. Unit: bytes                                                                                                                                                                                                                                                |
| comm-d-size                          | Size of the data commitment (CommD). Unit: bytes                                                                                                                                                                                                                               |
| comm-r-size                          | Size of the replica commitment (CommR). Unit: bytes                                                                                                                                                                                                                            |
| comm-r-star-size                     | Size of the aggregated commitment to each layer's replica (CommR*). Unit: bytes                                                                                                                                                                                                |
| comm-rs-size                         | Size of all replica commitments. Unit: bytes                                                                                                                                                                                                                                   |
| commitments-size                     | Size of all commitments returned by Seal. Unit: bytes                                                                                                                                                                                                                          |
| on-chain-porep-size                  | On-chain size of one Seal proof plus commitments. Unit: bytes                                                                                                                                                                                                                  |
| degree                               | Total in-degree of the ZigZag graph.                                                                                                                                                                                                                                           |
| base-degree                          | In-degree of the base depth-robust graph (DRG).                                                                                                                                                                                                                                |
| expansion-degree                     | Maximum in-degree of the bipartite expander graph component of a ZigZag graph.                                                                                                                                                                                                 |
| sloth-iter                           | Number of iterations of sloth verifiable delay encoding (VDE) to perform.                                                                                                                                                                                                      |
| partitions                           | Number of circuit partitions into which a proof is divided.                                                                                                                                                                                                                    |
| replication-time                     | Time to replicate one sector. Unit: seconds                                                                                                                                                                                                                                    |
| replication-time-per-byte            | Time to replicate one byte. Unit: seconds / byte                                                                                                                                                                                                                               |
| replication-time-per-gib             | Time to replicate one GiB. Unit: seconds / GiB                                                                                                                                                                                                                                 |
| sealing-time                         | Total CPU time to seal (replicate + generate proof of replication) one sector. Unit: seconds                                                                                                                                                                                   |
| non-circuit-proving-time             | Time (including replication) to generate a non-circuit proof of replication. Unit: seconds                                                                                                                                                                                     |
| vector-commitment-time               | Time to generate the vector commitments used in a non-circuit proof of replication. Unit: seconds                                                                                                                                                                              |
| circuit-proving-time-per-constraint  | Groth16 circuit proving time (from benchmarks) per constraint. Unit: seconds                                                                                                                                                                                                   |
| zigzag-total-proving-time            | Total time to generate a proof of replication (circuit and non-circuit). Unit: seconds                                                                                                                                                                                         |
| seal-time                            | Total time to seal (replication + proving) one sector. Unit: seconds                                                                                                                                                                                                           |
| wall-clock-seal-time                 | Wall clock time sealing time using SEAL-PARALLELISM cores. Unit: seconds                                                                                                                                                                                                       |
| seal-parallelism                     | Number of cores utilized when computing wall-clock-seal-time.                                                                                                                                                                                                                  |
| sector-gib                           | Number of GiB in one sector. Unit: GiB                                                                                                                                                                                                                                         |
| gib-seal-time                        | Total time to seal (replication + proving) one GiB. Unit: seconds                                                                                                                                                                                                              |
| total-parents                        | Number of parents (or padding) each node uses when performing key derivation.                                                                                                                                                                                                  |
| hash-functions                       | Alternate hash functions for use in merkle-tree generation, KDF, or other commitments. All values here assume 64 bytes of raw input, but benchmarks include any extra, 'personalization', bits/bytes included as input during merkle-tree construction.                        |
| single-kdf-hashes                    | Number of hashes performed as part of a single application of the key-derivation function (KDF). This is equal to the number of parents and includes the replica ID. Since we use Merkle-Damgard construction, the number of compression hashes is the number of elements - 1. |
| kdf-hashes                           | Number of hashes performed as part of the key-derivation function (KDF).                                                                                                                                                                                                       |
| single-kdf-time                      | Hashing time to perform a single KDF. Unit: seconds                                                                                                                                                                                                                            |
| single-layer-merkle-hashing-time     | Merkle hashing time for a single layer. Unit: seconds                                                                                                                                                                                                                          |
| total-merkle-trees                   | Total merkle trees which must be generated.                                                                                                                                                                                                                                    |
| total-merkle-hashing-time            | Total time to generate all merkle trees. Unit: seconds                                                                                                                                                                                                                         |
| total-nodes-to-encode                | Total nodes to encode across all layers.                                                                                                                                                                                                                                       |
| single-node-sloth-time               | Time to perform sloth (VDE) for a single node. Unit: seconds                                                                                                                                                                                                                   |
| single-node-encoding-time            | Time to encode a single node. Unit: seconds                                                                                                                                                                                                                                    |
| single-challenge-inclusion-proofs    | Number of inclusion proofs which must be verified for a single challenge.                                                                                                                                                                                                      |
| single-challenge-merkle-hases        | Number of merkle hashes which must be verified for a single challenge.                                                                                                                                                                                                         |
| single-challenge-kdf-hashes          | Number of KDF hashes which must be verified for a single challenge.                                                                                                                                                                                                            |
| single-challenge-sloth-verifications | Number of sloth iterations which must be verified for a single challenge.                                                                                                                                                                                                      |
| total-kdf-hashes                     | Total number of KDF (key-derivation function) required during replication.                                                                                                                                                                                                     |
| total-zigzag-kdf-hashing-constraints | Total number of kdf hashing constraints in a ZigZag circuit.                                                                                                                                                                                                                   |
| total-zigzag-non-hashing-constraints | Total number of hashes which must be verified in a ZigZag circuit.                                                                                                                                                                                                             |
| total-zigzag-circuit-kdf-hashes      | Total number of KDF hashes which must be verified in a ZigZag circuit.                                                                                                                                                                                                         |
| total-zigzag-sloth-constraints       | Total number of constraints due to sloth verification.                                                                                                                                                                                                                         |
| total-zigzag-constraints             | Total number of constraints which must be verified in a ZigZag circuit.                                                                                                                                                                                                        |
| layer-index                          | Index of layer. Unit: integer                                                                                                                                                                                                                                                  |
| layer-replication-time               | Time to replicate one layer. Unit: seconds                                                                                                                                                                                                                                     |
| storage-to-proof-size-ratio          | Ratio of sealed sector size to on-chain PoRep size.                                                                                                                                                                                                                            |
| storage-to-proof-size-float          | Ratio of sealed sector size to on-chain PoRep size -- expressed as a float.                                                                                                                                                                                                    |
| single-circuit-proof-size            | Size of a single Groth16 Proof. Unit: bytes                                                                                                                                                                                                                                    |
| total-circuit-proof-size             | Total size of a single circuit proof. Unit: bytes                                                                                                                                                                                                                              |
| total-challenges                     |                                                                                                                                                                                                                                                                                |
| partition-challenges                 |                                                                                                                                                                                                                                                                                |
| kdf-hash-function.size               | Size of digest (output) generated by *.HASH-FUNCTION.                                                                                                                                                                                                                          |
| kdf-hash-function.circuit-time       | Time for one *.HASH-FUNCTION in circuit.                                                                                                                                                                                                                                       |
| kdf-hash-function.constraints        | Number of constraints required to prove *.HASH-FUNCTION in circuit.                                                                                                                                                                                                            |
| kdf-hash-function.hash-function%     | Tuple containing the selected hash function's characteristics.                                                                                                                                                                                                                 |
| merkle-hash-function.size            | Size of digest (output) generated by *.HASH-FUNCTION.                                                                                                                                                                                                                          |
| merkle-hash-function.circuit-time    | Time for one *.HASH-FUNCTION in circuit.                                                                                                                                                                                                                                       |
| merkle-hash-function.constraints     | Number of constraints required to prove *.HASH-FUNCTION in circuit.                                                                                                                                                                                                            |
| merkle-hash-function.hash-function%  | Tuple containing the selected hash function's characteristics.                                                                                                                                                                                                                 |
| alpha-hash-function.size             | Size of digest (output) generated by *.HASH-FUNCTION.                                                                                                                                                                                                                          |
| alpha-hash-function.circuit-time     | Time for one *.HASH-FUNCTION in circuit.                                                                                                                                                                                                                                       |
| alpha-hash-function.constraints      | Number of constraints required to prove *.HASH-FUNCTION in circuit.                                                                                                                                                                                                            |
| alpha-hash-function.hash-function%   | Tuple containing the selected hash function's characteristics.                                                                                                                                                                                                                 |
| beta-hash-function.size              | Size of digest (output) generated by *.HASH-FUNCTION.                                                                                                                                                                                                                          |
| beta-hash-function.circuit-time      | Time for one *.HASH-FUNCTION in circuit.                                                                                                                                                                                                                                       |
| beta-hash-function.constraints       | Number of constraints required to prove *.HASH-FUNCTION in circuit.                                                                                                                                                                                                            |
| beta-hash-function.hash-function%    | Tuple containing the selected hash function's characteristics.                                                                                                                                                                                                                 |
| zigzag-soundness                     | ZigZag soundness: Unit fraction                                                                                                                                                                                                                                                |
| zigzag-lambda                        | ZigZag soundness: Unit bits                                                                                                                                                                                                                                                    |
| zigzag-epsilon                       | Maximum allowable deletion (space tightness): Unit: fraction                                                                                                                                                                                                                   |
| zigzag-delta                         | Maximum allowable cheating on labels (block corruption)                                                                                                                                                                                                                        |
| zigzag-basic-layer-challenges        | Multiple of lambda challenges per layer, without tapering optimization.                                                                                                                                                                                                        |
| zigzag-basic-layer-challenge-factor  | Number of challenges which, when multiplied by lambda, yields the number of challenges per layer without tapering optimization.                                                                                                                                                |
| zigzag-space-gap                     | Maximum allowable gap between actual and claimed storage. Unit: fraction                                                                                                                                                                                                       |
| zigzag-layer-challenges              | Number of challenges in this (indexed) layer of ZigZag PoRep. Unit: integer                                                                                                                                                                                                    |
| layers                               | Number of layers specified for this construction (not necessarily same as calculated from security parameters).                                                                                                                                                                |
# * ZigZag Report/Trace
# #+BEGIN_SRC lisp :package replication :exports results :results output html
#   (with-open-file (orient.web.html:*html-output-stream* "zigzag-report.html" :direction :output :if-exists :supersede :if-does-not-exist :create)
#     (orient.web.html:html-print `(:html ,*zigzag-base-report*)))

# (princ "<a href='zigzag-report.html' download>ZigZag Report</a>")
# #+END_SRC

# #+RESULTS:
# #+BEGIN_HTML
# <a href='zigzag-report.html' download>ZigZag Report</a>
# #+END_HTML
* JSON
#+NAME: project-root
#+BEGIN_SRC lisp :package replication :exports none
(namestring (project-root))
#+END_SRC

#+RESULTS: project-root
: /Users/clwk/dev/go/src/github.com/filecoin-project/orient/

#+BEGIN_SRC sh :exports both :results output :var calc="performance" dir=project-root
cd $dir; make ubercalc 2>&1 | /dev/null

./bin/ucalc solve --calc=filecoin | jq

#+END_SRC

#+RESULTS:
#+begin_example
[
  {
    "optimal-heights": {
      "tuples": [
        {
          "constraints": 0,
          "layer-index": 0,
          "lowest-time": 97.94244,
          "circuit-time": 0,
          "hashing-time": 97.94244,
          "optimal-beta-merkle-height": 30
        },
        {
          "constraints": 171690880,
          "layer-index": 1,
          "lowest-time": 24432.822,
          "circuit-time": 20836.523,
          "hashing-time": 3596.2986,
          "optimal-beta-merkle-height": 3
        },
        {
          "constraints": 171690880,
          "layer-index": 2,
          "lowest-time": 24432.822,
          "circuit-time": 20836.523,
          "hashing-time": 3596.2986,
          "optimal-beta-merkle-height": 3
        },
        {
          "constraints": 171690880,
          "layer-index": 3,
          "lowest-time": 24432.822,
          "circuit-time": 20836.523,
          "hashing-time": 3596.2986,
          "optimal-beta-merkle-height": 3
        },
        {
          "constraints": 225136320,
          "layer-index": 4,
          "lowest-time": 34205.582,
          "circuit-time": 27110.928,
          "hashing-time": 7094.655,
          "optimal-beta-merkle-height": 2
        },
        {
          "constraints": 330199936,
          "layer-index": 5,
          "lowest-time": 46857.348,
          "circuit-time": 39762.69,
          "hashing-time": 7094.655,
          "optimal-beta-merkle-height": 2
        },
        {
          "constraints": 424019904,
          "layer-index": 6,
          "lowest-time": 64618.906,
          "circuit-time": 50527.54,
          "hashing-time": 14091.367,
          "optimal-beta-merkle-height": 1
        },
        {
          "constraints": 636029856,
          "layer-index": 7,
          "lowest-time": 89882.68,
          "circuit-time": 75791.31,
          "hashing-time": 14091.367,
          "optimal-beta-merkle-height": 1
        },
        {
          "constraints": 796337056,
          "layer-index": 8,
          "lowest-time": 121573.375,
          "circuit-time": 93488.586,
          "hashing-time": 28084.791,
          "optimal-beta-merkle-height": 0
        },
        {
          "constraints": 1191833312,
          "layer-index": 9,
          "lowest-time": 168003.95,
          "circuit-time": 139919.16,
          "hashing-time": 28084.791,
          "optimal-beta-merkle-height": 0
        },
        {
          "constraints": 1785077696,
          "layer-index": 10,
          "lowest-time": 237649.81,
          "circuit-time": 209565.02,
          "hashing-time": 28084.791,
          "optimal-beta-merkle-height": 0
        }
      ]
    },
    "nodes": 1073741824,
    "degree": 13,
    "layers": 10,
    "profit": true,
    "seal-hz": 5000000000,
    "seal-ghz": 5,
    "daily-tib": 1.1147972,
    "seal-time": 843044.06,
    "fgr-months": 6.409414,
    "hourly-gib": 47.564682,
    "hourly-tib": 0.046449885,
    "needed-ghz": 1740.4132,
    "node-bytes": 32,
    "partitions": 1,
    "sector-gib": 32,
    "sloth-iter": 0,
    "base-degree": 5,
    "comm-d-size": 32,
    "comm-r-size": 32,
    "monthly-tib": 33.908417,
    "sector-size": 34359738368,
    "comm-rs-size": 64,
    "cpu-ghz-cost": 10,
    "gib-capacity": 104166.66,
    "one-year-fgr": 1.1387482,
    "tib-capacity": 101.72525,
    "two-year-fgr": 3.5830317,
    "zigzag-delta": 0.003,
    "zigzag-taper": 0.33333334,
    "annual-income": 50000,
    "gib-seal-cost": 0.16707969,
    "gib-seal-time": 26345.127,
    "total-parents": 13,
    "zigzag-lambda": 8,
    "zigzag-layers": 12,
    "hash-functions": {
      "tuples": [
        {
          "circuit-time": 0.153988,
          "hash-function-name": "pedersen",
          "hash-function-size": 32,
          "hash-function-time": 2.6156e-05,
          "hash-function-constraints": 1324
        },
        {
          "circuit-time": 0.65253,
          "hash-function-name": "blake2s-kdf",
          "hash-function-size": 32,
          "hash-function-time": 4.5608e-08,
          "hash-function-constraints": 5162
        },
        {
          "circuit-time": 1.30506,
          "hash-function-name": "blake2s",
          "hash-function-size": 32,
          "hash-function-time": 9.1216e-08,
          "hash-function-constraints": 10324
        }
      ]
    },
    "monthly-income": 4166.6665,
    "three-year-fgr": 6.027315,
    "tib-drive-cost": 30,
    "zigzag-epsilon": 0.007,
    "gib-seal-cycles": 131725630000000,
    "one-year-profit": 23294.107,
    "single-kdf-time": 6.38512e-07,
    "two-year-profit": 73294.1,
    "alternate-layers": {
      "tuples": [
        {
          "proving-time": 237649.81,
          "beta-merkle-height": 0
        },
        {
          "proving-time": 269791.34,
          "beta-merkle-height": 1
        },
        {
          "proving-time": 308929.63,
          "beta-merkle-height": 2
        },
        {
          "proving-time": 351566.25,
          "beta-merkle-height": 3
        },
        {
          "proving-time": 395952.03,
          "beta-merkle-height": 4
        },
        {
          "proving-time": 441212.38,
          "beta-merkle-height": 5
        },
        {
          "proving-time": 486910.06,
          "beta-merkle-height": 6
        },
        {
          "proving-time": 532826.4,
          "beta-merkle-height": 7
        },
        {
          "proving-time": 578852,
          "beta-merkle-height": 8
        },
        {
          "proving-time": 624932.3,
          "beta-merkle-height": 9
        },
        {
          "proving-time": 671039.94,
          "beta-merkle-height": 10
        },
        {
          "proving-time": 717161.25,
          "beta-merkle-height": 11
        },
        {
          "proving-time": 763289.4,
          "beta-merkle-height": 12
        },
        {
          "proving-time": 809420.9,
          "beta-merkle-height": 13
        },
        {
          "proving-time": 855554.1,
          "beta-merkle-height": 14
        },
        {
          "proving-time": 901688.4,
          "beta-merkle-height": 15
        },
        {
          "proving-time": 947822.8,
          "beta-merkle-height": 16
        },
        {
          "proving-time": 993957.5,
          "beta-merkle-height": 17
        },
        {
          "proving-time": 1040092.5,
          "beta-merkle-height": 18
        },
        {
          "proving-time": 1086227.4,
          "beta-merkle-height": 19
        },
        {
          "proving-time": 1132362.4,
          "beta-merkle-height": 20
        },
        {
          "proving-time": 1178497.4,
          "beta-merkle-height": 21
        },
        {
          "proving-time": 1224632.3,
          "beta-merkle-height": 22
        },
        {
          "proving-time": 1270767.1,
          "beta-merkle-height": 23
        },
        {
          "proving-time": 1316902.3,
          "beta-merkle-height": 24
        },
        {
          "proving-time": 1363037.1,
          "beta-merkle-height": 25
        },
        {
          "proving-time": 1409172.3,
          "beta-merkle-height": 26
        },
        {
          "proving-time": 1455307.1,
          "beta-merkle-height": 27
        },
        {
          "proving-time": 1501442,
          "beta-merkle-height": 28
        },
        {
          "proving-time": 1547577.1,
          "beta-merkle-height": 29
        },
        {
          "proving-time": 1593712.1,
          "beta-merkle-height": 30
        }
      ]
    },
    "comm-r-star-size": 32,
    "commitments-size": 96,
    "expansion-degree": 8,
    "replication-time": 6855.9707,
    "seal-parallelism": 14,
    "total-challenges": 2672,
    "zigzag-soundness": 0.00390625,
    "zigzag-space-gap": 0.01,
    "aws-glacier-price": 0.004,
    "single-kdf-hashes": 14,
    "three-year-profit": 123294.1,
    "must-have-filecoin": true,
    "total-circuit-time": 698674.8,
    "total-hashing-time": 137513.25,
    "total-proving-time": 836188.06,
    "on-chain-porep-size": 288,
    "space-gap-satisfied": true,
    "total-up-front-cost": 20455.89,
    "up-front-drive-cost": 3051.7576,
    "minimum-one-year-fgr": -2,
    "minimum-two-year-fgr": 0.25,
    "partition-challenges": 2672,
    "seal-cycles-per-hour": 6265487600000000,
    "up-front-memory-cost": 0,
    "wall-clock-seal-time": 59727.72,
    "income-during-ramp-up": 6250,
    "total-nodes-to-encode": 10737418240,
    "up-front-compute-cost": 17404.133,
    "up-front-sealing-cost": 17404.133,
    "fgr-months-at-capacity": 3.4094138,
    "kdf-hash-function-name": "blake2s-kdf",
    "kdf-hash-function.size": 32,
    "kdf-hash-function.time": 4.5608e-08,
    "layer-replication-time": 685.59705,
    "max-beta-merkle-height": 30,
    "minimum-three-year-fgr": 1,
    "one-year-fgr-satisfied": true,
    "one-year-profit-months": 5.590586,
    "seal-cycles-per-minute": 104424790000000,
    "seal-cycles-per-second": 1740413200000,
    "single-node-sloth-time": 0,
    "two-year-fgr-satisfied": true,
    "two-year-profit-months": 17.590586,
    "beta-hash-function-name": "blake2s",
    "beta-hash-function.size": 32,
    "beta-hash-function.time": 9.1216e-08,
    "comparable-monthly-cost": 416.66666,
    "kdf-hash-function.name%": "blake2s-kdf",
    "total-zigzag-challenges": 2672,
    "alpha-hash-function-name": "pedersen",
    "alpha-hash-function.size": 32,
    "alpha-hash-function.time": 2.6156e-05,
    "beta-hash-function.name%": "blake2s",
    "filecoin-fgr-requirement": true,
    "gib-hour-seal-investment": 365.90454,
    "layer-performance.layers": 10,
    "miner-months-to-capacity": 3,
    "replication-time-per-gib": 214.24908,
    "three-year-fgr-satisfied": true,
    "three-year-profit-months": 29.590586,
    "total-circuit-proof-size": 192,
    "total-zigzag-constraints": 5903706720,
    "alpha-hash-function.name%": "pedersen",
    "bench-circuit-constraints": 10324,
    "income-to-fgr-at-capacity": 14205.891,
    "merkle-hash-function-name": "pedersen",
    "merkle-hash-function.size": 32,
    "merkle-hash-function.time": 2.6156e-05,
    "replication-time-per-byte": 1.9953501e-07,
    "single-circuit-proof-size": 192,
    "single-node-encoding-time": 6.38512e-07,
    "bench-circuit-proving-time": 0.14464,
    "commodity-storage-discount": 10,
    "filecoin-fgr-requirement-1": true,
    "merkle-hash-function.name%": "pedersen",
    "total-untapered-challenges": 32000,
    "maximum-allowable-space-gap": 0.02,
    "single-challenge-kdf-hashes": 14,
    "single-sloth-iteration-time": 123,
    "storage-to-proof-size-float": 119304650,
    "storage-to-proof-size-ratio": 119304650,
    "layer-performance.node-bytes": 32,
    "wall-clock-seal-time-per-gib": 1866.4912,
    "kdf-hash-function.constraints": 5162,
    "layer-performance.layer-index": 10,
    "layer-performance.sector-size": 34359738368,
    "wall-clock-seal-time-per-byte": 1.7383054e-06,
    "zigzag-basic-layer-challenges": 2666.6667,
    "beta-hash-function.constraints": 10324,
    "kdf-hash-function.circuit-time": 0.65253,
    "layer-performance.circuit-time": 1593614.1,
    "total-zigzag-other-constraints": 0,
    "total-zigzag-sloth-constraints": 857712,
    "alpha-hash-function.constraints": 1324,
    "alpha-merkle-hash-function-name": "pedersen",
    "beta-hash-function.circuit-time": 1.30506,
    "filecoin-requirements-satisfied": true,
    "total-zigzag-circuit-kdf-hashes": 37408,
    "alpha-hash-function.circuit-time": 0.153988,
    "filecoin-storage-ratio-satisfied": true,
    "kdf-hash-function.hash-function%": {
      "circuit-time": 0.65253,
      "hash-function-name": "blake2s-kdf",
      "hash-function-size": 32,
      "hash-function-time": 4.5608e-08,
      "hash-function-constraints": 5162
    },
    "merkle-hash-function.constraints": 1324,
    "beta-hash-function.hash-function%": {
      "circuit-time": 1.30506,
      "hash-function-name": "blake2s",
      "hash-function-size": 32,
      "hash-function-time": 9.1216e-08,
      "hash-function-constraints": 10324
    },
    "kdf-hash-function.hash-functions%": {
      "tuples": [
        {
          "circuit-time": 0.153988,
          "hash-function-name": "pedersen",
          "hash-function-size": 32,
          "hash-function-time": 2.6156e-05,
          "hash-function-constraints": 1324
        },
        {
          "circuit-time": 0.65253,
          "hash-function-name": "blake2s-kdf",
          "hash-function-size": 32,
          "hash-function-time": 4.5608e-08,
          "hash-function-constraints": 5162
        },
        {
          "circuit-time": 1.30506,
          "hash-function-name": "blake2s",
          "hash-function-size": 32,
          "hash-function-time": 9.1216e-08,
          "hash-function-constraints": 10324
        }
      ]
    },
    "merkle-hash-function.circuit-time": 0.153988,
    "single-challenge-inclusion-proofs": 15,
    "alpha-hash-function.hash-function%": {
      "circuit-time": 0.153988,
      "hash-function-name": "pedersen",
      "hash-function-size": 32,
      "hash-function-time": 2.6156e-05,
      "hash-function-constraints": 1324
    },
    "beta-hash-function.hash-functions%": {
      "tuples": [
        {
          "circuit-time": 0.153988,
          "hash-function-name": "pedersen",
          "hash-function-size": 32,
          "hash-function-time": 2.6156e-05,
          "hash-function-constraints": 1324
        },
        {
          "circuit-time": 0.65253,
          "hash-function-name": "blake2s-kdf",
          "hash-function-size": 32,
          "hash-function-time": 4.5608e-08,
          "hash-function-constraints": 5162
        },
        {
          "circuit-time": 1.30506,
          "hash-function-name": "blake2s",
          "hash-function-size": 32,
          "hash-function-time": 9.1216e-08,
          "hash-function-constraints": 10324
        }
      ]
    },
    "layer-performance.layer-challenges": 2672,
    "single-sloth-iteration-constraints": 321,
    "alpha-hash-function.hash-functions%": {
      "tuples": [
        {
          "circuit-time": 0.153988,
          "hash-function-name": "pedersen",
          "hash-function-size": 32,
          "hash-function-time": 2.6156e-05,
          "hash-function-constraints": 1324
        },
        {
          "circuit-time": 0.65253,
          "hash-function-name": "blake2s-kdf",
          "hash-function-size": 32,
          "hash-function-time": 4.5608e-08,
          "hash-function-constraints": 5162
        },
        {
          "circuit-time": 1.30506,
          "hash-function-name": "blake2s",
          "hash-function-size": 32,
          "hash-function-time": 9.1216e-08,
          "hash-function-constraints": 10324
        }
      ]
    },
    "circuit-proving-time-per-constraint": 1.4010074e-05,
    "layer-performance.beta-hashing-time": 97.94244,
    "merkle-hash-function.hash-function%": {
      "circuit-time": 0.153988,
      "hash-function-name": "pedersen",
      "hash-function-size": 32,
      "hash-function-time": 2.6156e-05,
      "hash-function-constraints": 1324
    },
    "minimum-storage-to-proof-size-ratio": 42949670,
    "zigzag-basic-layer-challenge-factor": 333.33334,
    "layer-performance.alpha-hashing-time": 0,
    "layer-performance.merkle-tree.height": 30,
    "layer-performance.merkle-tree.leaves": 1073741824,
    "merkle-hash-function.hash-functions%": {
      "tuples": [
        {
          "circuit-time": 0.153988,
          "hash-function-name": "pedersen",
          "hash-function-size": 32,
          "hash-function-time": 2.6156e-05,
          "hash-function-constraints": 1324
        },
        {
          "circuit-time": 0.65253,
          "hash-function-name": "blake2s-kdf",
          "hash-function-size": 32,
          "hash-function-time": 4.5608e-08,
          "hash-function-constraints": 5162
        },
        {
          "circuit-time": 1.30506,
          "hash-function-name": "blake2s",
          "hash-function-size": 32,
          "hash-function-time": 9.1216e-08,
          "hash-function-constraints": 10324
        }
      ]
    },
    "single-challenge-sloth-verifications": 0,
    "total-zigzag-kdf-hashing-constraints": 193100096,
    "total-zigzag-non-hashing-constraints": 857712,
    "average-monthly-income-during-ramp-up": 2083.3333,
    "filecoin-porep-requirements-satisfied": true,
    "layer-performance.challenge-constraints": 4718068,
    "layer-performance.challenge-circuit-time": 596.4125,
    "layer-performance.layer-challenge-proofs": 15,
    "layer-performance.max-beta-merkle-height": 30,
    "layer-performance.merkle-tree.height-raw": 30,
    "layer-performance.merkle-tree.node-bytes": 32,
    "layer-performance.beta-hash-function.time": 9.1216e-08,
    "layer-performance.merkle-tree.beta-height": 30,
    "layer-performance.merkle-tree.sector-size": 34359738368,
    "layer-performance.alpha-hash-function.time": 2.6156e-05,
    "layer-performance.merkle-tree.alpha-height": 0,
    "layer-performance.merkle-tree.alpha-leaves": 1,
    "layer-performance.challenge-kdf-constraints": 72268,
    "layer-performance.challenge-kdf-circuit-time": 9.13542,
    "layer-performance.inclusion-proof-constraints": 309720,
    "layer-performance.merkle-tree.beta-hash-count": 1073741823,
    "layer-performance.single-challenge-kdf-hashes": 14,
    "filecoin-porep-security-requirements-satisfied": true,
    "layer-performance.inclusion-proof-circuit-time": 39.151802,
    "layer-performance.merkle-tree.alpha-hash-count": 0,
    "layer-performance.merkle-tree.total-hash-count": 1073741823,
    "layer-performance.kdf-hash-function.constraints": 5162,
    "layer-performance.beta-hash-function.constraints": 10324,
    "layer-performance.kdf-hash-function.circuit-time": 0.65253,
    "layer-performance.alpha-hash-function.constraints": 1324,
    "layer-performance.beta-hash-function.circuit-time": 1.30506,
    "layer-performance.challenge-inclusion-constraints": 4645800,
    "layer-performance.alpha-hash-function.circuit-time": 0.153988,
    "layer-performance.beta-inclusion-proof-constraints": 309720,
    "layer-performance.challenge-inclusion-circuit-time": 587.27704,
    "layer-performance.alpha-inclusion-proof-constraints": 0,
    "layer-performance.beta-inclusion-proof-circuit-time": 39.151802,
    "layer-performance.single-challenge-inclusion-proofs": 15,
    "layer-performance.alpha-inclusion-proof-circuit-time": 0,
    "layer-performance.circuit-proving-time-per-constraint": 1.4010074e-05,
    "layer-performance.merkle-tree.beta-inclusion-proof-hash-length": 30,
    "layer-performance.merkle-tree.alpha-inclusion-proof-hash-length": 0,
    "layer-performance.merkle-tree.total-inclusion-proof-hash-length": 30
  }
]
#+end_example
