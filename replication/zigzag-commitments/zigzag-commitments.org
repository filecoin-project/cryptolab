#+TITLE: ZigZag Commitments
#+OPTIONS: author:nil creator:nil timestamp:nil

#+begin_src lisp :exports none
  (ql:quickload :orient)
#+end_src

#+RESULTS:
| :ORIENT |

* Graph
#+NAME: layer-0
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(defparameter *zigzag-graph* (make-zigzag-graph 8 6))
(emit-layer-graph (nth 0 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC


Both renumbered and reversed parents are generated by a pseudorandom permutation and are provided only to illustrate the
nature of the zigzag commitment scheme. They accurately represent how parent-child relationships change between layers,
and are accurate for expander parents. However, this is not representative of the DRG parent selection algorithm.

** Replica Column Layers, Comm' Tree

#+BEGIN_SRC dot :file layer-0.png :var input=layer-0 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-0.png]]

#+NAME: layer-1
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 1 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-1.png :var input=layer-1 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-1.png]]

#+NAME: layer-2
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 2 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer=2.png :var input=layer-2 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer=2.png]]

#+NAME: layer-3
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 3 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-3.png :var input=layer-3 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-3.png]]

#+NAME: layer-4
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 4 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-4.png :var input=layer-4 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-4.png]]

#+NAME: layer-5
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 5 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

** Final Layer, CommR Tree
#+BEGIN_SRC dot :file layer-5.png :var input=layer-5 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-5.png]]



#+NAME: legend
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none
(emit-legend)
#+END_SRC

** Legend
#+BEGIN_SRC dot :file layer-legend.png :var input=legend :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-legend.png]]


* Details
** Columns
#+BEGIN_SRC lisp :package "filecoin.theory" :exports results
(columns *zigzag-graph*)
#+END_SRC

#+RESULTS:
|        | DRG Parent |        | Expander Parent |        | Challenged Node |        |        |
| (0, 1) | (0, 2)     | (0, 3) | (0, 4)          | (0, 5) | (0, 6)          | (0, 7) | (0, 8) |
| (1, 8) | (1, 7)     | (1, 6) | (1, 5)          | (1, 4) | (1, 3)          | (1, 2) | (1, 1) |
| (2, 1) | (2, 2)     | (2, 3) | (2, 4)          | (2, 5) | (2, 6)          | (2, 7) | (2, 8) |
| (3, 8) | (3, 7)     | (3, 6) | (3, 5)          | (3, 4) | (3, 3)          | (3, 2) | (3, 1) |
| (4, 1) | (4, 2)     | (4, 3) | (4, 4)          | (4, 5) | (4, 6)          | (4, 7) | (4, 8) |

** Final Layer
 #+BEGIN_SRC lisp :package "filecoin.theory" :exports results
(final-layer *zigzag-graph*)
#+END_SRC

 #+RESULTS:
 | (5, 8) | (5, 7) | (5, 6) | (5, 5) | (5, 4) | (5, 3) | (5, 2) | (5, 1) |

