#+TITLE: ZigZag Commitments
#+OPTIONS: author:nil creator:nil timestamp:nil

#+begin_src lisp :exports none
  (ql:quickload :orient)
#+end_src

#+RESULTS:
| :ORIENT |

* Graph
#+NAME: layer-0
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(defparameter *zigzag-graph* (make-zigzag-graph 8 6))

(let ((lg (first (zigzag-graph-layer-graphs *zigzag-graph*))))
  (defparameter *comm-d-graph* (make-comm-d-layer-graph (layer-graph-nodes lg) (layer-graph-challenged-node lg))))

(emit-layer-graph (nth 0 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+NAME: legend-odd
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none
(emit-legend :odd)
#+END_SRC

#+NAME: legend-even
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none
(emit-legend :even)
#+END_SRC

Both renumbered and reversed parents are generated by a pseudorandom permutation and are provided only to illustrate the
nature of the zigzag commitment scheme. They accurately represent how parent-child relationships change between layers,
and are accurate for expander parents. However, this is not representative of the DRG parent selection algorithm.

** Legend
#+BEGIN_SRC dot :file legend-odd.png :var input=legend-odd :exports results
$input
#+END_SRC

#+RESULTS:
[[file:legend-odd.png]]
#+BEGIN_SRC dot :file legend-even.png :var input=legend-even :exports results
$input
#+END_SRC

#+RESULTS:
[[file:legend-even.png]]

** Data Layer: CommD Tree
#+NAME: data-layer
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none
(emit-comm-d-layer-graph *comm-d-graph*)
#+END_SRC

#+BEGIN_SRC dot :file data-layer.png :var input=data-layer :exports results
$input
#+END_SRC

#+RESULTS:
[[file:data-layer.png]]

** Replica Column Layers: Comm' Tree

#+BEGIN_SRC dot :file layer-0.png :var input=layer-0 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-0.png]]

#+NAME: layer-1
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 1 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-1.png :var input=layer-1 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-1.png]]

#+NAME: layer-2
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 2 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer=2.png :var input=layer-2 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer=2.png]]

#+NAME: layer-3
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 3 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-3.png :var input=layer-3 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-3.png]]

#+NAME: layer-4
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 4 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

#+BEGIN_SRC dot :file layer-4.png :var input=layer-4 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-4.png]]

#+NAME: layer-5
#+BEGIN_SRC lisp :package "filecoin.theory" :results output silent :exports none 
(emit-layer-graph (nth 5 (zigzag-graph-layer-graphs *zigzag-graph*)))
#+END_SRC

** Final Layer: CommR Tree
#+BEGIN_SRC dot :file layer-5.png :var input=layer-5 :exports results
$input
#+END_SRC

#+RESULTS:
[[file:layer-5.png]]



* Details
** Initial Data Layer
 #+BEGIN_SRC lisp :package "filecoin.theory" :exports results
(initial-layer *comm-d-graph*)
#+END_SRC

 #+RESULTS:
 |        |        |        |        |        |        | Even Challenged Node |        |
 | (0, 1) | (0, 2) | (0, 3) | (0, 4) | (0, 5) | (0, 6) | (0, 7)               | (0, 8) |

** Columns
#+BEGIN_SRC lisp :package "filecoin.theory" :exports results
(columns *zigzag-graph*)
#+END_SRC

#+RESULTS:
| DRG Parents |        | Odd Expander Parent |        |        | Even Expander Parent | Challenged Nodes |        |
| (1, 1)      | (1, 2) | (1, 3)              | (1, 4) | (1, 5) | (1, 6)               | (1, 7)           | (1, 8) |
| (2, 8)      | (2, 7) | (2, 6)              | (2, 5) | (2, 4) | (2, 3)               | (2, 2)           | (2, 1) |
| (3, 1)      | (3, 2) | (3, 3)              | (3, 4) | (3, 5) | (3, 6)               | (3, 7)           | (3, 8) |
| (4, 8)      | (4, 7) | (4, 6)              | (4, 5) | (4, 4) | (4, 3)               | (4, 2)           | (4, 1) |
| (5, 1)      | (5, 2) | (5, 3)              | (5, 4) | (5, 5) | (5, 6)               | (5, 7)           | (5, 8) |


** Final Replica Layer
 #+BEGIN_SRC lisp :package "filecoin.theory" :exports results
(final-layer *zigzag-graph*)
#+END_SRC

 #+RESULTS:
 |        | Even Challenged Node |        |        |        | Even Expander Parent |        | Even DRG Parent |
 | (6, 1) | (6, 2)               | (6, 3) | (6, 4) | (6, 5) | (6, 6)               | (6, 7) | (6, 8)          |
